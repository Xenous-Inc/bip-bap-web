import React, { useRef, useState, useEffect, useMemo } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import pageStyles from '@styles/Page.module.css';
import styles from './Map.module.css';
import Header from '@components/organisms/Header';
import MapController from '@components/organisms/MapController';
import 'mapbox-gl/dist/mapbox-gl.css';
import mapboxgl, { Map as MapBoxMap, LngLat, Marker } from 'mapbox-gl';
import { useSensors } from '@pages/map/Map.hooks';
import { Spinner } from '@chakra-ui/react';
import theme from '@styles/theme';

mapboxgl.accessToken = process.env.MAPBOX_ACCESS_TOKEN || '';

const Map: NextPage = () => {
    const mapContainer = useRef<HTMLDivElement>(null);
    const map = useRef<MapBoxMap>(null);

    const [coords, setCoords] = useState<LngLat>(new LngLat(73.371454, 54.985974));
    const [zoom, setZoom] = useState(11);

    useEffect(() => {
        if (!mapContainer.current) return;
        if (map.current) return;

        const mapboxMap = new MapBoxMap({
            container: mapContainer.current,
            style: 'mapbox://styles/mapbox/streets-v11',
            center: coords,
            zoom: zoom,
        });
        mapboxMap.on('move', () => {
            setCoords(mapboxMap.getCenter());
            setZoom(mapboxMap.getZoom());
        });

        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        map.current = mapboxMap;
        getSensors();
    }, [mapContainer.current]);

    const { isLoading, sensors, error, getSensors } = useSensors();

    const [renderedMarkers, setRenderedMarkers] = useState<Array<Marker>>([]);

    const currentMarkers = useMemo(
        () =>
            sensors?.map(
                sensor =>
                    sensor.location &&
                    new mapboxgl.Marker({ color: theme.colors.green }).setLngLat([
                        sensor.location.coordinates[0],
                        sensor.location.coordinates[1],
                    ]),
            ),
        [sensors],
    );

    useEffect(() => {
        renderedMarkers.forEach(marker => marker.remove());

        const currentMap = map.current;
        if (currentMap) {
            currentMarkers?.forEach(marker => {
                if (!marker) return;

                marker.addTo(currentMap);
                setRenderedMarkers(prevRenderedMarkers => [...prevRenderedMarkers, marker]);
            });
        }
    }, [currentMarkers, map.current]);

    useEffect(
        () =>
            sensors?.forEach(
                sensor =>
                    sensor.location &&
                    map.current &&
                    new mapboxgl.Marker({ color: theme.colors.green })
                        .setLngLat([sensor.location.coordinates[0], sensor.location.coordinates[1]])
                        .addTo(map.current),
            ),
        [sensors, map.current],
    );

    return (
        <div className={pageStyles.container}>
            <Head>
                <title>Карта</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <Header />

            <main className={styles.container__main}>
                <div ref={mapContainer} className={styles.main__map}>
                    {isLoading && (
                        <div className={styles.map__overlay}>
                            <Spinner color={'green'} size={'xl'} />
                        </div>
                    )}
                    <MapController
                        className={styles.map__controller}
                        onZoomIn={() => map.current?.flyTo({ zoom: zoom + 1 })}
                        onZoomOut={() => map.current?.flyTo({ zoom: zoom - 1 })}
                    />
                </div>
            </main>
        </div>
    );
};

export default Map;
